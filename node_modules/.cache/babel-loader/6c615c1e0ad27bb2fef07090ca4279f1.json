{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/JmodPage.js\";\nimport React, { Component } from 'react'; //import Button from 'react-bootstrap/Button'\n//import Container from 'react-bootstrap/Container';\n//import Row from 'react-bootstrap/Row'\n//import Col from 'react-bootstrap/Col'\n//import Search from '../components/Search';\n\nimport Jmod from '../components/Jmod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HomePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jmod: this.props.jmod,\n      updates: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem(\"token\");\n    let old_feed = localStorage.getItem(\"old_feed\");\n\n    if (old_feed === null) {\n      localStorage.setItem(\"old_feed\", JSON.stringify({\n        jagexFiller: {\n          twitter: [],\n          reddit: []\n        }\n      }));\n    }\n\n    token ? fetch(`http://localhost:3000/jmods`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => res.json()).then(jmods => {\n      this.setState({\n        jmods\n      });\n    }).then(fetch(`http://localhost:3000/feed`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        old_feed: old_feed\n      })\n    }).then(res => res.json()).then(feed => {\n      localStorage.setItem(\"new_feed\", JSON.stringify(feed));\n    })) : this.props.history.push(\"/\");\n  }\n\n  checkUpdates() {\n    let old_feed = localStorage.getItem('old_feed');\n    let new_feed = localStorage.getItem('new_feed');\n    old_feed = JSON.parse(old_feed);\n    new_feed = JSON.parse(new_feed);\n    new_feed.map(j => {\n      if (old_feed[j]) {\n        if (old_feed[j][\"twitter\"] != new_feed[j][\"twitter\"] && old_feed[j][\"reddit\"] != new_feed[j][\"reddit\"]) {}\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.props.jmod !== \"\" ? /*#__PURE__*/_jsxDEV(Jmod, {\n        jmod: this.props.jmod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this) : this.state.jmods ? this.state.jmods.map(jmod => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"jmod\",\n            onClick: () => {\n              this.props.activeMod(jmod);\n            },\n            children: jmod.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 28\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HomePage; //  (\n// fetch(`http://localhost:3000/api/v1/profile`,{\n//     method: \"GET\",\n//     headers: {\n//         Authorization: `Bearer ${token}`\n//     }\n// })\n// .then(res => res.json())\n// .then(data => {\n//     this.setState({\n//         user: data.user.username\n//     })\n// }))","map":{"version":3,"sources":["/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/JmodPage.js"],"names":["React","Component","Jmod","HomePage","state","jmod","props","updates","componentDidMount","token","localStorage","getItem","old_feed","setItem","JSON","stringify","jagexFiller","twitter","reddit","fetch","method","headers","Authorization","then","res","json","jmods","setState","body","feed","history","push","checkUpdates","new_feed","parse","map","j","render","activeMod","name"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\n//import Button from 'react-bootstrap/Button'\n//import Container from 'react-bootstrap/Container';\n//import Row from 'react-bootstrap/Row'\n//import Col from 'react-bootstrap/Col'\n//import Search from '../components/Search';\nimport Jmod from '../components/Jmod'\n\nclass HomePage extends Component {\n\n   state = {\n       jmod: this.props.jmod,\n       updates: \"\"\n   }\n\n    componentDidMount() {\n        let token = localStorage.getItem(\"token\")\n        let old_feed = localStorage.getItem(\"old_feed\")\n        if (old_feed === null) {\n            localStorage.setItem(\"old_feed\", JSON.stringify({jagexFiller: {twitter: [], reddit: []}})) \n        }\n         token ? \n       \n        fetch(`http://localhost:3000/jmods`, {\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(res => res.json())\n        .then(jmods => {this.setState({jmods})})\n        .then(fetch(`http://localhost:3000/feed`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n                old_feed: old_feed\n              })\n        })\n        .then(res => res.json())\n        .then(feed => {\n            localStorage.setItem(\"new_feed\",JSON.stringify(feed))}))\n     : this.props.history.push(\"/\") \n    }\n\n    checkUpdates() {\n        let old_feed = localStorage.getItem('old_feed')\n        let new_feed = localStorage.getItem('new_feed')\n        old_feed = JSON.parse(old_feed)\n        new_feed = JSON.parse(new_feed)\n        new_feed.map(j => {\n            if (old_feed[j]) {\n               if (old_feed[j][\"twitter\"] != new_feed[j][\"twitter\"] &&  old_feed[j][\"reddit\"] != new_feed[j][\"reddit\"]) {\n\n               }\n            }\n        })\n\n    }\n\n    \n\n\n    render() {\n        return(\n            <div>\n                {this.props.jmod !== \"\" ?\n                <Jmod jmod={this.props.jmod} /> : this.state.jmods ? this.state.jmods.map(jmod => {\n                    return <React.Fragment> <button className=\"jmod\" onClick={() => {this.props.activeMod(jmod)}}>{jmod.name}</button></React.Fragment>\n                }) : null }\n            </div>  \n        )\n    }\n}\n\nexport default HomePage\n\n //  (\n        // fetch(`http://localhost:3000/api/v1/profile`,{\n        //     method: \"GET\",\n        //     headers: {\n        //         Authorization: `Bearer ${token}`\n        //     }\n        // })\n        // .then(res => res.json())\n        // .then(data => {\n        //     this.setState({\n        //         user: data.user.username\n        //     })\n        // }))"]},"metadata":{},"sourceType":"module"}