{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/JmodPage.js\";\nimport React, { Component } from 'react';\nimport Jmod from '../components/Jmod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jmod: this.props.jmod,\n      updates: \"\"\n    };\n    let state = {\n      jmod: this.props.jmod,\n      updates: \"\"\n    };\n    this.checkUpdates = this.checkUpdates.bind(this);\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem(\"token\");\n    let old_feed = localStorage.getItem(\"old_feed\");\n\n    if (old_feed === null) {\n      localStorage.setItem(\"old_feed\", JSON.stringify({\n        jagexFiller: {\n          twitter: [],\n          reddit: []\n        }\n      }));\n    }\n\n    token ? fetch(`http://localhost:3000/jmods`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => res.json()).then(jmods => {\n      this.setState({\n        jmods\n      });\n    }).then(fetch(`http://localhost:3000/feed`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        old_feed: old_feed\n      })\n    }).then(res => res.json()).then(feed => {\n      localStorage.setItem(\"new_feed\", JSON.stringify(feed));\n    })).then(response => this.checkUpdates(response)) : this.props.history.push(\"/\");\n  }\n\n  checkUpdates(response) {\n    console.log(response);\n    let old_feed = localStorage.getItem('old_feed');\n    let new_feed = localStorage.getItem('new_feed');\n    let old_json = JSON.parse(old_feed);\n    let new_json = JSON.parse(new_feed);\n    Object.keys(new_json).forEach(function (j) {\n      if (old_json[j]) {\n        if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"]) {\n          let update = `${j}'s twitter and reddit`;\n          this.setState(prevState => ({\n            updates: { ...prevState.updates,\n              update\n            }\n          }));\n        } else if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"]) {\n          let update = `${j}s twitter`;\n          this.setState(prevState => ({\n            updates: { ...prevState.updates,\n              update\n            }\n          }));\n        } else if (old_json[j][\"reddit\"] !== new_json[j][\"reddit\"]) {\n          let update = `${j}s reddit`;\n          this.setState(prevState => ({\n            updates: { ...prevState.updates,\n              update\n            }\n          }));\n        }\n      } else {\n        let update = `${j}'s twitter and reddit`;\n        this.setState(prevState => ({\n          updates: { ...prevState.updates,\n            update\n          }\n        }));\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.props.jmod !== \"\" ? /*#__PURE__*/_jsxDEV(Jmod, {\n        jmod: this.props.jmod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this) : this.state.jmods ? this.state.jmods.map(jmod => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"jmod\",\n            onClick: () => {\n              this.props.activeMod(jmod);\n            },\n            children: jmod.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 28\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HomePage; //  (\n// fetch(`http://localhost:3000/api/v1/profile`,{\n//     method: \"GET\",\n//     headers: {\n//         Authorization: `Bearer ${token}`\n//     }\n// })\n// .then(res => res.json())\n// .then(data => {\n//     this.setState({\n//         user: data.user.username\n//     })\n// }))","map":{"version":3,"sources":["/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/JmodPage.js"],"names":["React","Component","Jmod","HomePage","constructor","props","state","jmod","updates","checkUpdates","bind","componentDidMount","token","localStorage","getItem","old_feed","setItem","JSON","stringify","jagexFiller","twitter","reddit","fetch","method","headers","Authorization","then","res","json","jmods","setState","body","feed","response","history","push","console","log","new_feed","old_json","parse","new_json","Object","keys","forEach","j","update","prevState","render","map","activeMod","name"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Jmod from '../components/Jmod'\n\nclass HomePage extends Component {\n\n    constructor(props) {\n        super(props)\n        let state = {\n            jmod: this.props.jmod,\n            updates: \"\"\n        }\n        this.checkUpdates = this.checkUpdates.bind(this)\n    }\n\n   state = {\n       jmod: this.props.jmod,\n       updates: \"\"\n   }\n\n    componentDidMount() {\n        let token = localStorage.getItem(\"token\")\n        let old_feed = localStorage.getItem(\"old_feed\")\n        if (old_feed === null) {\n            localStorage.setItem(\"old_feed\", JSON.stringify({jagexFiller: {twitter: [], reddit: []}})) \n        }\n         token ? \n       \n        fetch(`http://localhost:3000/jmods`, {\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(res => res.json())\n        .then(jmods => {this.setState({jmods})})\n        .then(fetch(`http://localhost:3000/feed`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n                old_feed: old_feed\n              })\n        })\n        .then(res => res.json())\n        .then(feed => {\n            localStorage.setItem(\"new_feed\",JSON.stringify(feed))}))\n        .then(response => this.checkUpdates(response))\n     : this.props.history.push(\"/\") \n    }\n\n    checkUpdates(response) {\n        console.log(response)\n        let old_feed = localStorage.getItem('old_feed')\n        let new_feed = localStorage.getItem('new_feed')\n        let old_json = JSON.parse(old_feed)\n        let new_json = JSON.parse(new_feed)\n        Object.keys(new_json).forEach(function (j) {\n            if (old_json[j]) {\n               if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"]) {\n                    let update = `${j}'s twitter and reddit`\n                    this.setState(prevState => ({       \n                        updates: {\n                            ...prevState.updates, update\n                        }\n                    }))     \n               }\n               else if(old_json[j][\"twitter\"] !== new_json[j][\"twitter\"]) {\n                let update = `${j}s twitter`\n                this.setState(prevState => ({       \n                    updates: {\n                        ...prevState.updates, update\n                    }\n                }))     \n               }\n               else if(old_json[j][\"reddit\"] !== new_json[j][\"reddit\"]) {\n                let update = `${j}s reddit`\n                this.setState(prevState => ({       \n                    updates: {\n                        ...prevState.updates, update\n                    }\n                }))     \n               }\n            }\n            else{\n                let update = `${j}'s twitter and reddit`\n                this.setState(prevState => ({       \n                    updates: {\n                        ...prevState.updates, update\n                    }\n                }))  \n            }\n        })\n    }\n\n    render() {\n        return(\n            <div>\n                {this.props.jmod !== \"\" ?\n                <Jmod jmod={this.props.jmod} /> : this.state.jmods ? this.state.jmods.map(jmod => {\n                    return <React.Fragment> <button className=\"jmod\" onClick={() => {this.props.activeMod(jmod)}}>{jmod.name}</button></React.Fragment>\n                }) : null }\n            </div>  \n        )\n    }\n}\n\nexport default HomePage\n\n //  (\n        // fetch(`http://localhost:3000/api/v1/profile`,{\n        //     method: \"GET\",\n        //     headers: {\n        //         Authorization: `Bearer ${token}`\n        //     }\n        // })\n        // .then(res => res.json())\n        // .then(data => {\n        //     this.setState({\n        //         user: data.user.username\n        //     })\n        // }))"]},"metadata":{},"sourceType":"module"}