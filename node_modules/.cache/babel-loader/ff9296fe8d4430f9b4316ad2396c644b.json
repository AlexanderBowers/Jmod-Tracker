{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/components/Search.js\";\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Comment from './Comment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Search extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: \"\",\n      reddit: \"\",\n      id: 0,\n      comments: [],\n      tweets: [],\n      jmod: \"\"\n    };\n\n    this.handleChange = e => {\n      let jmod = e.target.value;\n      this.setState({\n        jmod\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let token = localStorage.getItem(\"token\");\n      console.log(`sending fetch for ${this.state.query}`);\n      fetch('http://localhost:3000/search', {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: `${this.state.query}`\n        })\n      }).then(res => res.json()).then(console.log);\n    };\n\n    this.handleReddit = e => {\n      e.preventDefault();\n      let token = localStorage.getItem(\"token\");\n      console.log(`sending reddit request for ${this.state.query}`);\n      fetch('http://localhost:3000/reddit', {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: `${this.state.query}`\n        })\n      }).then(res => res.json()).then(res => this.setState({\n        comments: res.data.children\n      }));\n    };\n  }\n\n  //to iterate over reddit response\n  //response comes out as\n  //{data: {children: [{data: {body: text, permalink: text}}, {}, {}]}}\n  //to generate link to comment:\n  //https://reddit.com/${permalink}\n  //if user isn't found, response is {message: \"Not Found\"}\n  render() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: this.searchMod,\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Search Jmod\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n} // <div>\n//     Twitter Search\n// <Form onSubmit={this.handleSubmit}>\n//     <Form.Group>\n//         <Form.Control type=\"text\" placeholder=\"Search\" onChange={this.handleChange}/>\n//     </Form.Group>\n// </Form>\n// <br></br>\n//     Reddit Search\n//     <Form onSubmit={this.handleReddit}>\n//         <Form.Group>\n//             <Form.Control type=\"text\" placeholder=\"Search\" onChange={this.handleChange}/>\n//         </Form.Group>\n//     </Form>\n// <p>{this.state.query}</p>\n// <div>\n//     { this.state.comments.length > 0 ? this.state.comments.map(comment => {\n//          return <Comment body={comment.data.body} permalink={comment.data.permalink}/>\n//     }) : null}\n// </div>\n// </div>","map":{"version":3,"sources":["/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/components/Search.js"],"names":["React","Form","Comment","Search","Component","state","query","reddit","id","comments","tweets","jmod","handleChange","e","target","value","setState","handleSubmit","preventDefault","token","localStorage","getItem","console","log","fetch","method","headers","body","JSON","stringify","name","then","res","json","handleReddit","data","children","render","searchMod"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Comment from './Comment'\n\n\nexport default class Search extends React.Component {\n    state = {\n        query: \"\",\n        reddit: \"\",\n        id: 0,\n        comments: [],\n        tweets: [],\n        jmod: \"\"\n    }\n    handleChange = (e) => {\n        let jmod =  e.target.value\n        this.setState({jmod})\n      }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        let token = localStorage.getItem(\"token\")\n        console.log(`sending fetch for ${this.state.query}`)\n        fetch('http://localhost:3000/search', {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n              name: `${this.state.query}`\n            })\n\n        })\n        .then(res => res.json())\n        .then(console.log)\n    }\n    //to iterate over twitter response\n    //response comes out as\n    //{data: [{\"text\": \"blah blah\", \"id\": \"number_string\"}]} 10 objects return inside the array.\n    //to generate link to tweet:\n    //https://twitter.com/${username}/status/${id}\n\n\n    //when user doesn't exist, return is:\n    //{errors:{detail: \"blah blah blah\"}}\n\n    handleReddit = (e) => {\n        e.preventDefault()\n        let token = localStorage.getItem(\"token\")\n        console.log(`sending reddit request for ${this.state.query}`)\n        fetch('http://localhost:3000/reddit', {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n              name: `${this.state.query}`\n            })\n\n        })\n        .then(res => res.json())\n        .then(res => this.setState({\n             comments: res.data.children\n        }\n        ))\n    }\n    //to iterate over reddit response\n    //response comes out as\n    //{data: {children: [{data: {body: text, permalink: text}}, {}, {}]}}\n    //to generate link to comment:\n    //https://reddit.com/${permalink}\n    //if user isn't found, response is {message: \"Not Found\"}\n\n    render(){\n        return (\n            <Form onSubmit={this.searchMod}>\n                \n                <Form.Group>\n                    <Form.Control type=\"text\" placeholder=\"Search Jmod\" onChange={this.handleChange}/>\n                </Form.Group>\n            </Form>\n        )\n    }\n}\n\n// <div>\n            //     Twitter Search\n            // <Form onSubmit={this.handleSubmit}>\n            //     <Form.Group>\n            //         <Form.Control type=\"text\" placeholder=\"Search\" onChange={this.handleChange}/>\n            //     </Form.Group>\n            // </Form>\n\n            // <br></br>\n            //     Reddit Search\n            //     <Form onSubmit={this.handleReddit}>\n            //         <Form.Group>\n            //             <Form.Control type=\"text\" placeholder=\"Search\" onChange={this.handleChange}/>\n            //         </Form.Group>\n            //     </Form>\n            // <p>{this.state.query}</p>\n            // <div>\n               \n            //     { this.state.comments.length > 0 ? this.state.comments.map(comment => {\n            //          return <Comment body={comment.data.body} permalink={comment.data.permalink}/>\n            //     }) : null}\n            // </div>\n            // </div>"]},"metadata":{},"sourceType":"module"}