{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/src/containers/FeedPage.js\";\nimport React, { Component } from 'react';\nimport Jmod from '../components/Jmod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FeedPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jmod: this.props.jmod,\n      updates: \"\",\n      follows: JSON.parse(localStorage.getItem('follows'))\n    };\n  }\n\n  componentDidMount() {\n    let updates = localStorage.getItem(\"updates\");\n\n    if (updates === null) {\n      localStorage.setItem(\"updates\", \"\");\n    }\n\n    let token = localStorage.getItem(\"token\");\n    let feed = localStorage.getItem(\"feed\");\n    let jmods = localStorage.getItem('follows');\n\n    if (feed === null) {\n      localStorage.setItem(\"feed\", JSON.stringify({\n        jagexFiller: {\n          twitter: [],\n          reddit: []\n        }\n      }));\n    }\n\n    if (token) {\n      this.getFeed(token, jmods);\n    } else {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  getFeed(token, jmods) {\n    fetch(`https://jmod-tracker.herokuapp.com/feed`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        jmods: jmods\n      })\n    }).then(res => res.json()).then(feed => {\n      feed = JSON.stringify(feed);\n      localStorage.setItem(\"new_feed\", feed);\n      this.checkUpdates();\n      this.renderUpdates();\n    });\n  }\n\n  checkUpdates() {\n    let feed = localStorage.getItem('feed');\n    let new_feed = localStorage.getItem('new_feed');\n    let old_json = JSON.parse(feed);\n    let new_json = JSON.parse(new_feed);\n    let updates = \"\";\n    Object.keys(new_json).forEach(function (j) {\n      if (old_json[j]) {\n        if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length > 0) {\n          updates += `${j}'s twitter and reddit `;\n        } else if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"]) {\n          updates += `${j}'s twitter `;\n        } else if (old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length !== 0) {\n          updates += `${j}'s reddit `;\n        } else if (old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length === 0) {\n          updates += \"\";\n        }\n      } else {\n        updates += `${j}'s twitter and reddit `;\n      }\n    });\n    localStorage.setItem('updates', updates);\n    localStorage.setItem('feed', new_feed);\n    localStorage.removeItem('new_feed');\n  }\n\n  renderUpdates() {\n    let updates = localStorage.getItem('updates');\n\n    if (updates.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"jmodList\",\n        children: \"If this is your first time visiting after leaving the site, refresh this page. Otherwise, there are no new updates. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 20\n      }, this);\n    } else {\n      let new_updates = `There are updates in ${updates}`;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"jmodList\",\n        children: new_updates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 24\n      }, this);\n    }\n  }\n\n  renderJmods() {\n    if (this.props.jmod !== \"\") {\n      return /*#__PURE__*/_jsxDEV(Jmod, {\n        jmod: this.props.jmod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.follows && this.state.follows.length > 0) {\n      this.state.follows.map(jmod => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"jmod\",\n            onClick: () => {\n              this.props.activeMod(jmod);\n            },\n            children: jmod\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this);\n      });\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"You're not following any Jmods. Visit their page and press the follow button to receive updates here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: this.state.error ? this.state.error : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), this.props.jmod !== \"\" ? /*#__PURE__*/_jsxDEV(Jmod, {\n        jmod: this.props.jmod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this) : this.state.follows ? this.state.follows.map(jmod => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"jmod\",\n            onClick: () => {\n              this.props.activeMod(jmod);\n            },\n            children: jmod\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 24\n        }, this);\n      }) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FeedPage;","map":{"version":3,"sources":["/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/src/containers/FeedPage.js"],"names":["React","Component","Jmod","FeedPage","state","jmod","props","updates","follows","JSON","parse","localStorage","getItem","componentDidMount","setItem","token","feed","jmods","stringify","jagexFiller","twitter","reddit","getFeed","history","push","fetch","method","headers","Authorization","body","then","res","json","checkUpdates","renderUpdates","new_feed","old_json","new_json","Object","keys","forEach","j","length","removeItem","new_updates","renderJmods","map","activeMod","render","error"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Jmod from '../components/Jmod'\n\nclass FeedPage extends Component {\n\n   state = {\n       jmod: this.props.jmod,\n       updates: \"\",\n       follows: JSON.parse(localStorage.getItem('follows'))\n   }\n\n    componentDidMount() {\n        let updates = localStorage.getItem(\"updates\")\n        if (updates === null) {\n            localStorage.setItem(\"updates\", \"\")\n        }\n        let token = localStorage.getItem(\"token\")\n        let feed = localStorage.getItem(\"feed\")\n        let jmods = localStorage.getItem('follows')\n        if (feed === null) {\n            localStorage.setItem(\"feed\", JSON.stringify({jagexFiller: {twitter: [], reddit: []}})) \n        }\n         if (token) {\n            this.getFeed(token, jmods)\n         }\n        else { \n            this.props.history.push(\"/\")\n        } \n    }\n\n    getFeed(token, jmods) {\n        fetch(`https://jmod-tracker.herokuapp.com/feed`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n                jmods: jmods\n            })\n        })\n        .then(res => res.json())\n        .then(feed => {\n            feed = JSON.stringify(feed)\n            localStorage.setItem(\"new_feed\",feed)\n            this.checkUpdates()\n            this.renderUpdates()\n            \n        }\n        )\n    }\n\n    checkUpdates() {\n        let feed = localStorage.getItem('feed')\n        let new_feed = localStorage.getItem('new_feed')\n        let old_json = JSON.parse(feed)\n        let new_json = JSON.parse(new_feed)\n        let updates = \"\"\n        Object.keys(new_json).forEach(function (j) {\n            if (old_json[j]) {\n               if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length > 0) {\n                   updates  +=( `${j}'s twitter and reddit `)\n               }\n               else if(old_json[j][\"twitter\"] !== new_json[j][\"twitter\"]) {\n                   updates  +=(`${j}'s twitter `)\n               }\n               else if(old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length !== 0) {\n                    updates  +=(`${j}'s reddit `)\n               }\n               else if (old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length === 0) {\n                    updates += \"\"\n                }\n            }\n            else {\n                    updates  +=(`${j}'s twitter and reddit `)\n            }\n        })\n        localStorage.setItem('updates', updates)\n        localStorage.setItem('feed', new_feed)\n        localStorage.removeItem('new_feed')\n    }\n\n    renderUpdates() {        \n        let updates = localStorage.getItem('updates')\n        if (updates.length === 0){\n            return <p className=\"jmodList\">If this is your first time visiting after leaving the site, refresh this page.\n                        Otherwise, there are no new updates. </p>\n        }\n        else {\n                let new_updates = `There are updates in ${updates}`\n                return <p className=\"jmodList\">{new_updates}</p>\n            \n        }\n        \n    }\n\n    renderJmods(){\n        if (this.props.jmod !== \"\") {\n            return <Jmod jmod={this.props.jmod} />\n        }\n        else if (this.state.follows && this.state.follows.length > 0) {\n            this.state.follows.map(jmod => {\n                 return <React.Fragment><button className=\"jmod\" onClick={() => {this.props.activeMod(jmod)}}>{jmod}</button></React.Fragment>\n            })\n        }\n        else {\n            return <h4>You're not following any Jmods. Visit their page and press the follow button to receive updates here.</h4>\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <h5>{this.state.error ? this.state.error : null}</h5>\n                {this.props.jmod !== \"\" ?\n            <Jmod jmod={this.props.jmod} /> : this.state.follows ? this.state.follows.map(jmod => {\n                return <React.Fragment> <button className=\"jmod\" onClick={() => {this.props.activeMod(jmod)}}>{jmod}</button></React.Fragment>\n            }) : null }\n            </div>  \n        )\n    }\n}\n\nexport default FeedPage"]},"metadata":{},"sourceType":"module"}