{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/FeedPage.js\";\nimport React, { Component } from 'react';\nimport Jmod from '../components/Jmod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FeedPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jmod: this.props.jmod,\n      updates: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem(\"token\");\n    let feed = localStorage.getItem(\"feed\");\n    let follows = localStorage.getItem(\"follows\");\n    console.log('test');\n\n    if (follows === null) {\n      follows = [];\n    }\n\n    if (feed === null) {\n      localStorage.setItem(\"feed\", JSON.stringify({\n        jagexFiller: {\n          twitter: [],\n          reddit: []\n        }\n      }));\n    }\n\n    if (token) {\n      if (follows.length > 2) {\n        fetch(`http://localhost:3000/feed`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n          },\n          body: JSON.stringify({\n            jmods: `${follows}`,\n            old_feed: `${feed}`\n          })\n        }).then(res => res.json()).then(jmods => {\n          this.setState({\n            jmods\n          });\n          this.getFeed(token, feed);\n        });\n      } else {\n        console.log('3');\n        this.setState(prevState => ({\n          error: 'Follow a Jmod to see updates here by clicking on their page.'\n        }));\n      }\n    } else {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  getFeed(token, feed) {\n    fetch(`http://localhost:3000/feed`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        feed: feed\n      })\n    }).then(res => res.json()).then(feed => {\n      localStorage.setItem(\"new_feed\", JSON.stringify(feed));\n      this.checkUpdates();\n    });\n  }\n\n  checkUpdates() {\n    let feed = localStorage.getItem('feed');\n    let new_feed = localStorage.getItem('new_feed');\n    let old_json = JSON.parse(feed);\n    let new_json = JSON.parse(new_feed);\n    let updates = \"\";\n    Object.keys(new_json).forEach(function (j) {\n      if (old_json[j]) {\n        if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length > 0) {\n          updates += `${j}'s twitter and reddit, `;\n        } else if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"]) {\n          updates += `${j}'s twitter, `;\n        } else if (old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length !== 0) {\n          updates += `${j}'s reddit, `;\n        } else if (old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length === 0) {\n          updates += \"\";\n        }\n      } else {\n        updates += `${j}'s twitter and reddit, `;\n      }\n    });\n    localStorage.setItem('updates', updates);\n    localStorage.setItem('feed', new_feed);\n    localStorage.removeItem('new_feed');\n  }\n\n  renderUpdates() {\n    let updates = localStorage.getItem('updates');\n\n    if (updates) {\n      if (updates.length === 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updates\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"There are no new updates.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updates\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: `There are updates in ${updates}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: this.state.error ? this.state.error : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), this.renderUpdates(), this.props.jmod !== \"\" ? /*#__PURE__*/_jsxDEV(Jmod, {\n        jmod: this.props.jmod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this) : this.state.jmods ? this.state.jmods.map(jmod => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"jmod\",\n            onClick: () => {\n              this.props.activeMod(jmod);\n            },\n            children: jmod.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 28\n        }, this);\n      }) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FeedPage;","map":{"version":3,"sources":["/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/FeedPage.js"],"names":["React","Component","Jmod","FeedPage","state","jmod","props","updates","componentDidMount","token","localStorage","getItem","feed","follows","console","log","setItem","JSON","stringify","jagexFiller","twitter","reddit","length","fetch","method","headers","body","jmods","old_feed","then","res","json","setState","getFeed","prevState","error","history","push","Authorization","checkUpdates","new_feed","old_json","parse","new_json","Object","keys","forEach","j","removeItem","renderUpdates","render","map","activeMod","name"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Jmod from '../components/Jmod'\n\nclass FeedPage extends Component {\n\n   state = {\n       jmod: this.props.jmod,\n       updates: \"\"\n   }\n\n    componentDidMount() {\n        let token = localStorage.getItem(\"token\")\n        let feed = localStorage.getItem(\"feed\")\n        let follows = localStorage.getItem(\"follows\")\n        console.log('test')\n        if (follows === null) {\n            follows = []\n        }\n        if (feed === null) {\n            localStorage.setItem(\"feed\", JSON.stringify({jagexFiller: {twitter: [], reddit: []}})) \n        }\n        if (token) {\n            if (follows.length > 2) {\n                fetch(`http://localhost:3000/feed`, {\n                    method: \"POST\",\n                    headers: {\n                      \"Content-Type\" : \"application/json\",\n                      \"Accept\" : \"application/json\"\n                    },\n                    body: JSON.stringify({\n                      jmods: `${follows}`,\n                      old_feed: `${feed}` \n                    })\n            })\n            .then(res => res.json())\n            .then(jmods => {\n                this.setState({jmods})\n                this.getFeed(token, feed)\n            })\n\n            }\n            else {\n                console.log('3')\n                this.setState(prevState => ({\n                    error: 'Follow a Jmod to see updates here by clicking on their page.'\n                }))\n            }\n            \n     } \n     else {\n        this.props.history.push(\"/\") \n     }\n    }\n\n    getFeed(token, feed) {\n        fetch(`http://localhost:3000/feed`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n                feed: feed\n            })\n        })\n        .then(res => res.json())\n        .then(feed => {\n            localStorage.setItem(\"new_feed\",JSON.stringify(feed))\n            this.checkUpdates()}\n        )\n    }\n\n    checkUpdates() {\n        let feed = localStorage.getItem('feed')\n        let new_feed = localStorage.getItem('new_feed')\n        let old_json = JSON.parse(feed)\n        let new_json = JSON.parse(new_feed)\n        let updates = \"\"\n        Object.keys(new_json).forEach(function (j) {\n            if (old_json[j]) {\n               if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length > 0) {\n                   updates  +=( `${j}'s twitter and reddit, `)\n               }\n               else if(old_json[j][\"twitter\"] !== new_json[j][\"twitter\"]) {\n                   updates  +=(`${j}'s twitter, `)\n               }\n               else if(old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length !== 0) {\n                    updates  +=(`${j}'s reddit, `)\n               }\n               else if (old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length === 0) {\n                    updates += \"\"\n                }\n            }\n            else {\n                    updates  +=(`${j}'s twitter and reddit, `)\n            }\n        })\n        localStorage.setItem('updates', updates)\n        localStorage.setItem('feed', new_feed)\n        localStorage.removeItem('new_feed')\n    }\n\n    renderUpdates() {        \n        let updates = localStorage.getItem('updates')\n        if (updates){\n            if (updates.length === 0){\n                return (\n                    <div className='updates'>\n                        <h4>There are no new updates.</h4>\n                    </div>\n                )\n            }\n            else {\n                return (\n                    <div className='updates'>\n                        <h4>{`There are updates in ${updates}`}</h4>\n                    </div>\n                )\n            }\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <h5>{this.state.error ? this.state.error : null}</h5>\n                {this.renderUpdates()}\n                {this.props.jmod !== \"\" ?\n                <Jmod jmod={this.props.jmod} /> : this.state.jmods ? this.state.jmods.map(jmod => {\n                    return <React.Fragment> <button className=\"jmod\" onClick={() => {this.props.activeMod(jmod)}}>{jmod.name}</button></React.Fragment>\n                }) : null }\n            </div>  \n        )\n    }\n}\n\nexport default FeedPage"]},"metadata":{},"sourceType":"module"}