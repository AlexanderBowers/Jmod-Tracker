{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/FeedPage.js\";\nimport React, { Component } from 'react';\nimport Jmod from '../components/Jmod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FeedPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jmod: this.props.jmod,\n      updates: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem(\"token\");\n    let feed = localStorage.getItem(\"feed\");\n\n    if (feed === null) {\n      localStorage.setItem(\"feed\", JSON.stringify({\n        jagexFiller: {\n          twitter: [],\n          reddit: []\n        }\n      }));\n    }\n\n    token ? this.getFeed(token, feed) : this.props.history.push(\"/\");\n  }\n\n  getFeed(token, feed) {\n    fetch(`http://localhost:3000/feed`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        feed: feed\n      })\n    }).then(res => res.json()).then(feed => {\n      localStorage.setItem(\"new_feed\", JSON.stringify(feed));\n      this.checkUpdates();\n    });\n  }\n\n  checkUpdates(new_feed) {\n    let feed = localStorage.getItem('feed');\n    let old_feed = JSON.parse(feed);\n    let updates = \"\";\n    Object.keys(new_json).forEach(function (j) {\n      if (old_json[j]) {\n        if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length > 0) {\n          updates += `${j}'s twitter and reddit, `;\n        } else if (old_feed[j][\"twitter\"] !== new_feed[j][\"twitter\"]) {\n          updates += `${j}'s twitter, `;\n        } else if (old_feed[j][\"reddit\"] !== new_feed[j][\"reddit\"] && new_feed[j][\"reddit\"].length !== 0) {\n          updates += `${j}'s reddit, `;\n        } else if (old_feed[j][\"reddit\"] !== new_feed[j][\"reddit\"] && new_feed[j][\"reddit\"].length === 0) {\n          updates += \"\";\n        }\n      } else {\n        updates += `${j}'s twitter and reddit, `;\n      }\n    });\n    this.renderUpdates(updates);\n    localStorage.setItem('feed', new_feed);\n  }\n\n  renderUpdates(updates) {\n    if (updates && updates.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"updates\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"There are no new updates.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"updates\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: `There are updates in ${updates}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  renderJmods() {\n    if (this.props.jmod !== \"\") {\n      console.log(\"shouldn't be here\");\n      return /*#__PURE__*/_jsxDEV(Jmod, {\n        jmod: this.props.jmod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }, this);\n    } else if (this.props.follows && this.props.follows.length > 0) {\n      this.props.follows.map(jmod => {\n        console.log('am i here?');\n        console.log(jmod);\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"jmod\",\n          onClick: () => {\n            this.props.activeMod(jmod);\n          },\n          children: jmod\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this);\n      });\n    } else {\n      console.log('why am i not here?');\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"You're not following any Jmods. Visit their page and press the follow button to receive updates here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.get, this.renderJmods()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FeedPage;","map":{"version":3,"sources":["/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/containers/FeedPage.js"],"names":["React","Component","Jmod","FeedPage","state","jmod","props","updates","componentDidMount","token","localStorage","getItem","feed","setItem","JSON","stringify","jagexFiller","twitter","reddit","getFeed","history","push","fetch","method","headers","Authorization","body","then","res","json","checkUpdates","new_feed","old_feed","parse","Object","keys","new_json","forEach","j","old_json","length","renderUpdates","renderJmods","console","log","follows","map","activeMod","render","get"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Jmod from '../components/Jmod'\n\nclass FeedPage extends Component {\n\n   state = {\n       jmod: this.props.jmod,\n       updates: \"\"\n   }\n\n    componentDidMount() {\n        let token = localStorage.getItem(\"token\")\n        let feed = localStorage.getItem(\"feed\")\n        if (feed === null) {\n            localStorage.setItem(\"feed\", JSON.stringify({jagexFiller: {twitter: [], reddit: []}})) \n        }\n         token ? this.getFeed(token, feed)\n     : this.props.history.push(\"/\") \n    }\n\n    getFeed(token, feed) {\n        fetch(`http://localhost:3000/feed`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n                feed: feed\n            })\n        })\n        .then(res => res.json())\n        .then(feed => {\n            localStorage.setItem(\"new_feed\",JSON.stringify(feed))\n            this.checkUpdates()\n        }\n        )\n    }\n\n    checkUpdates(new_feed) {\n        let feed = localStorage.getItem('feed')\n        let old_feed = JSON.parse(feed)\n        let updates = \"\"\n        Object.keys(new_json).forEach(function (j) {\n            if (old_json[j]) {\n               if (old_json[j][\"twitter\"] !== new_json[j][\"twitter\"] && old_json[j][\"reddit\"] !== new_json[j][\"reddit\"] && new_json[j][\"reddit\"].length > 0) {\n                   updates  +=( `${j}'s twitter and reddit, `)\n               }\n               else if(old_feed[j][\"twitter\"] !== new_feed[j][\"twitter\"]) {\n                   updates  +=(`${j}'s twitter, `)\n               }\n               else if(old_feed[j][\"reddit\"] !== new_feed[j][\"reddit\"] && new_feed[j][\"reddit\"].length !== 0) {\n                    updates  +=(`${j}'s reddit, `)\n               }\n               else if (old_feed[j][\"reddit\"] !== new_feed[j][\"reddit\"] && new_feed[j][\"reddit\"].length === 0) {\n                    updates += \"\"\n                }\n            }\n            else {\n                    updates  +=(`${j}'s twitter and reddit, `)\n            }\n        })\n        this.renderUpdates(updates)\n        localStorage.setItem('feed', new_feed)\n    }\n\n    renderUpdates(updates) {        \n        if (updates && updates.length === 0){\n            return (\n                <div className='updates'>\n                    <h4>There are no new updates.</h4>\n                </div>\n            )\n        }\n        else {\n            \n            return (\n                <div className='updates'>\n                     <h4>{`There are updates in ${updates}`}</h4>\n                </div>\n               \n            )\n        }\n        \n    }\n\n    renderJmods(){\n        if (this.props.jmod !== \"\") {\n            console.log(\"shouldn't be here\")\n            return <Jmod jmod={this.props.jmod} />\n        }\n        else if (this.props.follows && this.props.follows.length > 0) {\n            this.props.follows.map(jmod => {\n                console.log('am i here?')\n                console.log(jmod)\n                 return <button className=\"jmod\" onClick={() => {this.props.activeMod(jmod)}}>{jmod}</button>\n            })\n        }\n        else {\n            console.log('why am i not here?')\n            return <h4>You're not following any Jmods. Visit their page and press the follow button to receive updates here.</h4>\n        }\n    }\n\n    render() {\n        return(\n            <div>{this.get}\n                {this.renderJmods()}\n            </div>  \n        )\n    }\n}\n\nexport default FeedPage"]},"metadata":{},"sourceType":"module"}