{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/components/Jmod.js\";\nimport React from 'react';\nimport CommentContainer from '../containers/CommentContainer';\nimport TweetContainer from '../containers/TweetContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Jmod extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      active: \"\"\n    };\n  }\n\n  handleReddit(e) {\n    e.preventDefault();\n    let token = localStorage.getItem(\"token\");\n    fetch('http://localhost:3000/reddit', {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: `${this.props.jmod.name}`\n      })\n    }).then(res => res.json()).then(res => {\n      if (res.data) {\n        this.setState({\n          comments: res.data.children,\n          active: \"reddit\",\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          error: \"This person does not visit Reddit\"\n        });\n      }\n    });\n  }\n\n  handleTwitter(e) {\n    e.preventDefault();\n    let token = localStorage.getItem(\"token\");\n    fetch('http://localhost:3000/search', {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: `${this.props.jmod.name}`\n      })\n    }).then(res => res.json()).then(tweets => {\n      if (tweets.data) {\n        this.setState({\n          active: \"twitter\",\n          tweets: tweets.data,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          error: \"This person does not visit Twitter\"\n        });\n      }\n    });\n  } //to iterate over twitter response\n  //response comes out as\n  //{data: [{\"text\": \"blah blah\", \"id\": \"number_string\"}]} 10 objects return inside the array.\n  //to generate link to tweet:\n  //https://twitter.com/${username}/status/${id}\n  //when user doesn't exist, return is:\n  //{errors:{detail: \"blah blah blah\"}}\n  //to iterate over reddit response\n  //response comes out as\n  //{data: {children: [{data: {body: text, permalink: text}}, {}, {}]}}\n  //to generate link to comment:\n  //https://reddit.com/${permalink}\n  //if user isn't found, response is {message: \"Not Found\"}\n\n\n  renderSwitch(state) {\n    switch (state) {\n      case \"reddit\":\n        return /*#__PURE__*/_jsxDEV(CommentContainer, {\n          comments: this.state.comments,\n          jmod: this.props.jmod\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 24\n        }, this);\n\n      case \"twitter\":\n        return /*#__PURE__*/_jsxDEV(TweetContainer, {\n          tweets: this.state.tweets,\n          jmod: this.props.jmod\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return \"\";\n    }\n  }\n\n  handleFollow(e) {\n    e.preventDefault();\n    localStorage.getItem('feed');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"JmodPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: this.state.error ? this.state.error : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.props.jmod.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: e => {\n          this.handleFollow(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"twitter\",\n        onClick: e => {\n          this.handleTwitter(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reddit\",\n        onClick: e => {\n          this.handleReddit(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 88\n      }, this), this.renderSwitch(this.state.active)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Jmod;","map":{"version":3,"sources":["/mnt/c/Users/Alex/dev/flatiron/JmodTracker/Jmod-Tracker-frontend/frontend/src/components/Jmod.js"],"names":["React","CommentContainer","TweetContainer","Jmod","Component","state","active","handleReddit","e","preventDefault","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","name","props","jmod","then","res","json","data","setState","comments","children","error","handleTwitter","tweets","renderSwitch","handleFollow","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport CommentContainer from '../containers/CommentContainer'\nimport TweetContainer from '../containers/TweetContainer'\n\n\nclass Jmod extends React.Component {\n\n    state = {\n        active: \"\"\n    }\n\n    handleReddit (e) {\n        e.preventDefault()\n        let token = localStorage.getItem(\"token\")\n        fetch('http://localhost:3000/reddit', {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n              name: `${this.props.jmod.name}`\n            })\n\n        })\n        .then(res => res.json())\n        .then(res => {\n            if(res.data) {\n                this.setState({\n                    comments: res.data.children,\n                    active: \"reddit\",\n                    error: \"\"\n                })\n            }   \n            else{\n                this.setState({\n                    error: \"This person does not visit Reddit\"\n                })\n            } \n        })\n    }\n\n     handleTwitter  (e)  {\n        e.preventDefault()\n        let token = localStorage.getItem(\"token\")\n        fetch('http://localhost:3000/search', {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\" : \"application/json\",\n                \"Accept\" : \"application/json\"\n            },\n            body: JSON.stringify({\n              name: `${this.props.jmod.name}`\n            })\n\n        })\n        .then(res => res.json())\n        .then(tweets => {\n            if (tweets.data) {\n                this.setState({\n                    active: \"twitter\",\n                    tweets: tweets.data,\n                    error: \"\"\n                })\n            }\n            else {\n                this.setState({\n                    error: \"This person does not visit Twitter\"\n                })\n            }\n        })\n    }\n    //to iterate over twitter response\n    //response comes out as\n    //{data: [{\"text\": \"blah blah\", \"id\": \"number_string\"}]} 10 objects return inside the array.\n    //to generate link to tweet:\n    //https://twitter.com/${username}/status/${id}\n\n\n    //when user doesn't exist, return is:\n    //{errors:{detail: \"blah blah blah\"}}\n    //to iterate over reddit response\n    //response comes out as\n    //{data: {children: [{data: {body: text, permalink: text}}, {}, {}]}}\n    //to generate link to comment:\n    //https://reddit.com/${permalink}\n    //if user isn't found, response is {message: \"Not Found\"}\n\n    renderSwitch(state) {\n        switch(state) {\n            case \"reddit\":\n                return <CommentContainer comments={this.state.comments} jmod={this.props.jmod}/>\n            case \"twitter\":\n                return <TweetContainer tweets={this.state.tweets} jmod={this.props.jmod}/>\n            default:\n                return \"\"\n        }\n    }\n\n    handleFollow(e) {\n        e.preventDefault()\n        localStorage.getItem('feed')\n    }\n\n    render(){\n    return (\n        <div className=\"JmodPage\">\n            <h5>{this.state.error ? this.state.error : null}</h5>\n        <h1>{this.props.jmod.name}</h1>\n        <button className=\"button\" onClick={(e) => {this.handleFollow(e)}}></button>\n        <button className=\"twitter\" onClick={(e) => {this.handleTwitter(e)}}></button> <button className=\"reddit\" onClick={(e) => {this.handleReddit(e)}}></button>\n        {this.renderSwitch(this.state.active)}\n        </div>\n    )\n    }\n}\nexport default Jmod"]},"metadata":{},"sourceType":"module"}